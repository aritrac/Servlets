/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2016-03-05 14:47:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSPs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class about_005fpage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>About Fog Computing</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- ALL JAVA CODE HERE -->\r\n");
      out.write("\t");

		String pageId = "";
		String actionId = "";
		if(session.getAttribute("page") != null){
			pageId = (String)session.getAttribute("pageid");
		}
		
		if(session.getAttribute("actionid") != null){
			actionId = (String)session.getAttribute("actionid");
		}
	
      out.write("\r\n");
      out.write("\t<div\r\n");
      out.write("\t\tstyle=\"width: 70%; top: 0px; height: 80px; left: 230px; position: absolute\">\r\n");
      out.write("\t\t<h1 align=\"center\">Fog Computing : Mitigating Insider Data Theft\r\n");
      out.write("\t\t\tAttacks In the Cloud</h1>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<table\r\n");
      out.write("\t\tstyle=\"width: 10%; position: absolute; top: 100px; height: 80x; left: 1060px; text-align: right\"\r\n");
      out.write("\t\talign=\"center\">\r\n");
      out.write("\t\t<th><a href=\"");
      out.print(request.getContextPath());
      out.write("/Dispatcher?pageid=aboutus&actionid=doShow\">Go Back</a></th>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<div\r\n");
      out.write("\t\t\t\tstyle=\"width: 70%; top: 140px; height: 50px; left: 180px; position: absolute;\">\r\n");
      out.write("\t\t\t\t<h3 align=\"center\">\r\n");
      out.write("\t\t\t\t\tAbout Fog Computing\r\n");
      out.write("\t\t\t\t\t</h4>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div\r\n");
      out.write("\t\t\t\tstyle=\"width: 70%; top: 202px; height: 30px; left: 180px; text-align: center; position: absolute; display: none\">\r\n");
      out.write("\t\t\t\t<font color=\"red\">Invalid User Password</color>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div\r\n");
      out.write("\t\t\t\tstyle=\"width: 60%; top: 250px; height: 100px; left: 290px; position: absolute\">\r\n");
      out.write("\t\t\t\t<p>Offensive decoy technology is a system, which provides the\r\n");
      out.write("\t\t\t\t\tclients to secure their information in the server using decoy\r\n");
      out.write("\t\t\t\t\ttechnology. The users are those who have valid credentials to use\r\n");
      out.write("\t\t\t\t\tthis system. In this system users are also called as insiders. In\r\n");
      out.write("\t\t\t\t\tthe security point of view, all the remote-users are to be treated\r\n");
      out.write("\t\t\t\t\tas attackers.</p>\r\n");
      out.write("\t\t\t\t<p>When the user registers to our system user needs to answer\r\n");
      out.write("\t\t\t\t\tsome challenging questions and select a specific time to download\r\n");
      out.write("\t\t\t\t\tfiles along with valid details required to use the system. From\r\n");
      out.write("\t\t\t\t\tanswers given by the user for that challenging questions the system\r\n");
      out.write("\t\t\t\t\tprovides the security answer by performing some operations within\r\n");
      out.write("\t\t\t\t\tthe system for downloading files.</p>\r\n");
      out.write("\t\t\t\t<p>If the insider or attacker wants to download the file from\r\n");
      out.write("\t\t\t\t\tthe system user should provide security answer provided at the time\r\n");
      out.write("\t\t\t\t\tof registration. If the security answer is incorrect or if it is\r\n");
      out.write("\t\t\t\t\tnot a specified time to download the file then the system provides\r\n");
      out.write("\t\t\t\t\tan identical file which is not an original file which is also\r\n");
      out.write("\t\t\t\t\tcalled as decoy file to the insider/attacker. Apart from that, in\r\n");
      out.write("\t\t\t\t\tour system user can also view how many times each file have been\r\n");
      out.write("\t\t\t\t\tdownloaded by the insider and attacker.</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
